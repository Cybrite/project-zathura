generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}



model User {
    id           String   @id @default(uuid())
    email        String   @unique
    username     String   @unique
    password     String
    firstName    String?
    lastName     String?
    role         Role     @default(USER)
    refreshToken String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    rating       Int      @default(100)
    gamesPlayed  Int      @default(0)
    gamesWon     Int      @default(0)
    
    sentRequests     FriendRequest[] @relation("SentRequests")
    receivedRequests FriendRequest[] @relation("ReceivedRequests")
     
    friendsTo   Friendship[] @relation("UserFriends")
    friendsFrom Friendship[] @relation("FriendsUser")

    gameParticipations GameParticipant[]
    results            Result[]

    @@map("users")
}

model FriendRequest {
     id         String           @id @default(uuid())
     status     FriendshipStatus @default(PENDING)
     senderId   String
     receiverId String
     createdAt  DateTime         @default(now())
     updatedAt  DateTime         @updatedAt
 
     sender   User @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
     receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
 
     @@unique([senderId, receiverId])
     @@map("friend_requests")
}
 
model Friendship {
     id        String   @id @default(uuid())
     userId    String
     friendId  String
     createdAt DateTime @default(now())
 
     user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
     friend User @relation("FriendsUser", fields: [friendId], references: [id], onDelete: Cascade)
 
     @@unique([userId, friendId])
     @@map("friendships")
}

enum Role {
    USER
    ADMIN
}

enum FriendshipStatus {
     PENDING
     ACCEPTED
     REJECTED
}

model HectocGame {
    id          String           @id @default(uuid())
    createdAt   DateTime         @default(now())
    startedAt   DateTime?
    endedAt     DateTime?
    status      GameStatus       @default(WAITING)
    
    target      Int              @default(100)
    difficulty  String           // easy, medium, hard, expert
    isDuel      Boolean          @default(false)
    
    // Store the questions as JSON array
    // [{qId:"", expression:"", possibleSolution:""}]
    questions   Json?
    
    results     Result[]
    
    participants GameParticipant[]

    @@map("hectoc_games")
    @@index([status])
}

model Result {
    id            String   @id @default(uuid())
    createdAt     DateTime @default(now())
    
    participantId String
    gameId        String
    
    // Results stored as JSON array:
    // [{
    //   qId: string,
    //   user_ans: string/number,
    //   isCorrect: boolean,
    //   timeToSolve: number // milliseconds
    // },...]
    results       Json?
    
    totalScore    Int      @default(0)
    totalTime     Int      @default(0)
    isWinner      Boolean  @default(false)
    
    // Relations
    participant   GameParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
    game          HectocGame      @relation(fields: [gameId], references: [id], onDelete: Cascade)
    user          User            @relation(fields: [userId], references: [id])
    userId        String

    @@unique([participantId, gameId])
    @@map("results")
}



enum GameStatus {
    WAITING
    IN_PROGRESS
    FINISHED
    CANCELLED
}

enum HectocChallengeStatus {
    PENDING
    ACCEPTED
    REJECTED
    EXPIRED
}

model GameParticipant {
    id         String          @id @default(uuid())
    gameId     String
    userId     String
    role       ParticipantRole @default(PLAYER)
    isCreator  Boolean         @default(false)
    joinedAt   DateTime        @default(now())
    
    // Relations
    game       HectocGame      @relation(fields: [gameId], references: [id], onDelete: Cascade)
    user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    // Relation to results
    results    Result[]

    @@unique([gameId, userId])
    @@map("game_participants")
}

enum ParticipantRole {
    PLAYER
}